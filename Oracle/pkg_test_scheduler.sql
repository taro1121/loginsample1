create or replace PACKAGE pkg_test_scheduler
AS

	PROCEDURE JOB_PROC_STEP_1;

	PROCEDURE JOB_PROC_STEP_2;
	
	PROCEDURE JOB_PROC_STEP_3;
	
	FUNCTION GENERATE_FILE(FNAME IN VARCHAR2) RETURN NUMBER;
	
	FUNCTION LOG_MESSAGE(MESSAGE IN VARCHAR2) RETURN NUMBER;

END pkg_test_scheduler;
/

create or replace PACKAGE BODY pkg_test_scheduler
AS

PROCEDURE JOB_PROC_STEP_1
AS
	L_STEP_NO VARCHAR2(15) := 'JOB_PROC_STEP_1';
	L_RC NUMBER;
	L_PARAM_NAME VARCHAR2(25) := 'PROC_STEP_1_FILE_NAME';
	L_PARAM_VALUE VARCHAR2(100) := 'JOB_SCHED_FILE_';
	L_ID NUMBER;
BEGIN
	DBMS_OUTPUT.PUT_LINE ('[INFO] RUNNING JOB ' || L_STEP_NO);
	L_RC := LOG_MESSAGE('[INFO] RUNNING JOB ' || L_STEP_NO);
	
	SELECT (NVL(MAX(PARAM_ID),0) + 1) INTO L_ID FROM JOB_PARAMETERS; 
	
	L_PARAM_VALUE := L_PARAM_VALUE || TO_CHAR(SYSDATE, 'MM_DD_YYYY_HH_MI_SS') || '.TXT';
	
	INSERT INTO JOB_PARAMETERS (PARAM_ID,
    PARAM_NAME,
    PARAM_VALUE,
    PARAM_STATUS,
    JOB_MESSAGE
	) SELECT
		L_ID AS PARAM_ID,
		L_PARAM_NAME AS PARAM_NAME,
		L_PARAM_VALUE AS PARAM_VALUE,
		'CREATED' AS PARAM_STATUS,
		'INSERTED FROM STEP 1 OF THE JOB' JOB_MESSAGE
	FROM DUAL WHERE NOT
		EXISTS ( SELECT 1 FROM
				JOB_PARAMETERS JP
			WHERE JP.PARAM_NAME = L_PARAM_NAME );
	
	L_RC := LOG_MESSAGE('[INFO] FILE NAME GENERATED - ' || L_STEP_NO);	
		
	DBMS_OUTPUT.PUT_LINE ('[INFO] COMPLETED JOB ' || L_STEP_NO);
	L_RC := LOG_MESSAGE('[INFO] COMPLETED JOB ' || L_STEP_NO);
END JOB_PROC_STEP_1;

----------------

PROCEDURE JOB_PROC_STEP_2
AS
	L_STEP_NO VARCHAR2(15) := 'JOB_PROC_STEP_2';
	L_RC NUMBER;
	L_FILE_NAME VARCHAR2(250);
	L_PARAM_NAME VARCHAR2(25) := 'PROC_STEP_1_FILE_NAME';
	
BEGIN
	DBMS_OUTPUT.PUT_LINE ('[INFO] RUNNING JOB ' || L_STEP_NO);
	L_RC := LOG_MESSAGE('[INFO] RUNNING JOB ' || L_STEP_NO);
	
	SELECT PARAM_VALUE INTO L_FILE_NAME  FROM JOB_PARAMETERS WHERE PARAM_NAME = L_PARAM_NAME AND PARAM_STATUS = 'CREATED';
	
	IF L_FILE_NAME IS NOT NULL THEN
		L_RC := GENERATE_FILE(L_FILE_NAME);
		L_RC := LOG_MESSAGE('[INFO] FILE CREATED - ' || L_STEP_NO);	
		IF L_RC = 0 THEN
			UPDATE JOB_PARAMETERS
			SET PARAM_STATUS = 'USED'
			WHERE PARAM_NAME = L_PARAM_NAME 
			AND PARAM_STATUS = 'CREATED';
			L_RC := LOG_MESSAGE('[INFO] PARAMETER UPDATED - ' || L_STEP_NO);	
		END IF;
	ELSE
		L_RC := LOG_MESSAGE('[INFO] FILE NOT FOUND IN JOB_PARAMETERS - ' || L_STEP_NO);
	END IF;
		
	DBMS_OUTPUT.PUT_LINE ('[INFO] COMPLETED JOB ' || L_STEP_NO);
	L_RC := LOG_MESSAGE('[INFO] COMPLETED JOB ' || L_STEP_NO);
	COMMIT;
END JOB_PROC_STEP_2;


-------------------------

PROCEDURE JOB_PROC_STEP_3
AS
	L_STEP_NO VARCHAR2(15) := 'JOB_PROC_STEP_3';
	L_RC NUMBER;
	L_PARAM_NAME VARCHAR2(25) := 'PROC_STEP_1_FILE_NAME';	
BEGIN
	DBMS_OUTPUT.PUT_LINE ('[INFO] RUNNING JOB ' || L_STEP_NO);
	L_RC := LOG_MESSAGE('[INFO] RUNNING JOB ' || L_STEP_NO);

	UPDATE JOB_PARAMETERS
	SET PARAM_STATUS = 'ARCHIVED'
	WHERE PARAM_NAME = L_PARAM_NAME 
	AND PARAM_STATUS = 'USED';
	L_RC := LOG_MESSAGE('[INFO] PARAMETER ARCHIVED - ' || L_STEP_NO);	
	
	DBMS_OUTPUT.PUT_LINE ('[INFO] COMPLETED JOB ' || L_STEP_NO);
	L_RC := LOG_MESSAGE('[INFO] COMPLETED JOB ' || L_STEP_NO);
END JOB_PROC_STEP_3;

----------------------


FUNCTION GENERATE_FILE(FNAME IN VARCHAR2) RETURN NUMBER
AS
	V_FILE  UTL_FILE.FILE_TYPE;
	L_TXT VARCHAR2(500);
BEGIN

	BEGIN
	V_FILE := UTL_FILE.FOPEN(location     => 'G_DATA_DIR',
						   filename     => FNAME,
						   open_mode    => 'w',
						   max_linesize => 32767);
	
	L_TXT := 'File Written by Step 2 @' || TO_CHAR(SYSDATE, 'MM/DD/YYYY HH:MI:SS');
						   
	UTL_FILE.PUT_LINE(V_FILE, L_TXT);		

	UTL_FILE.FCLOSE(V_FILE);	
	
	RETURN 0;
	EXCEPTION
		WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE ('[INFO] ERROR WHILE GENERATE_FILE '  || SQLCODE || ' ' || SUBSTR(SQLERRM, 1, 64)); 
		RETURN 1;
	END;
	
	
END GENERATE_FILE;

FUNCTION LOG_MESSAGE(MESSAGE IN VARCHAR2) RETURN NUMBER
AS 
	L_ID NUMBER;
BEGIN
	BEGIN
		SELECT (NVL(MAX(LOG_ID),0) + 1) INTO L_ID FROM JOB_LOG; 
		INSERT INTO JOB_LOG(LOG_ID, LOG_MESSAGE, LOG_TIME) 
		VALUES (L_ID, MESSAGE, SYSDATE);
		RETURN 0;
		EXCEPTION
			WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE ('[INFO] ERROR WHILE LOG_MESSAGE '  || SQLCODE || ' ' || SUBSTR(SQLERRM, 1, 64)); 
			RETURN 1;
	END;	
END LOG_MESSAGE;


END pkg_test_scheduler;
/
